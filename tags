!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.2	//
ALLOC	src/survS.h	3;"	d
AffymetrixChipMap	src/Chip.cpp	/^AffymetrixChipMap::AffymetrixChipMap(const char* filename, unsigned skip_first_lines, unsigned snp_name_position, unsigned recoded_snp_name_position, unsigned phisical_position_position, unsigned strand_position, unsigned chromosome_position, unsigned allele_A_position, unsigned allele_B_position, unsigned reg1_position, char delim)$/;"	f	class:AffymetrixChipMap
AffymetrixChipMap	src/Chip.h	/^class AffymetrixChipMap : public ChipMap$/;"	c
CI	src/merge.snp.data.cpp	/^typedef std::map<std::string, std::string>::const_iterator CI;$/;"	t	file:
CalculateRS	src/gwaa.c	/^double CalculateRS(unsigned int nAA, unsigned int nAB, unsigned int nBA, unsigned int nBB, unsigned int nDH)$/;"	f
ChipData	src/Chip.h	/^class ChipData$/;"	c
ChipMap	src/Chip.h	/^class ChipMap$/;"	c
MAXIDS	src/convert_snp_merlin.cpp	29;"	d	file:
MAXIDS	src/convert_snp_merlin_wslash.cpp	29;"	d	file:
MAXSNPs	src/convert_snp_illumina.cpp	27;"	d	file:
Map	src/Chip.h	/^		std::map<std::string, map_values> Map;$/;"	m	class:ChipMap
R2_EM_INITIALIZATION_FUDGE_FACTOR	src/gwaa.c	1142;"	d	file:
R2_EM_LIKELIHOOD_CONVERSION_TOLERANCE	src/gwaa.c	1141;"	d	file:
R2_EM_MAX_ITERATIONS	src/gwaa.c	1140;"	d	file:
Rprint	src/mematriR.h	/^void Rprint(mematrix<double> matrix)$/;"	f
SMV_CHIP	src/Chip.h	2;"	d
SMV_GTPS_CONTAINER_H	src/gtps_container.h	19;"	d
SNPHWE	src/gwaa.c	/^double SNPHWE(int obs_hets, int obs_hom1, int obs_hom2)$/;"	f
Search	src/merge.snp.data.cpp	/^Search::Search(unsigned *snp_intersected, unsigned *ids_intersected, unsigned num_snps_intersected, unsigned num_ids_intersected)$/;"	f	class:Search
Search	src/merge.snp.data.cpp	/^class Search$/;"	c	file:
X	src/reg1data.h	/^	mematrix<double> X;$/;"	m	class:coxph_data
X	src/reg1data.h	/^	mematrix<double> X;$/;"	m	class:regdata
Y	src/reg1data.h	/^	mematrix<double> Y;$/;"	m	class:regdata
_	src/convert.snp.affymetrix.cpp	29;"	d	file:
_	src/convert.snp.affymetrix.cpp	32;"	d	file:
_	src/merge.snp.data.cpp	39;"	d	file:
_	src/merge.snp.data.cpp	42;"	d	file:
__MEMATRIX_H__	src/mematrix.h	2;"	d
affymetrix_chip_data	src/Chip.cpp	/^affymetrix_chip_data::affymetrix_chip_data(std::string filename_, unsigned snp_position, unsigned polymorphism_position, unsigned skip_first_lines)$/;"	f	class:affymetrix_chip_data
affymetrix_chip_data	src/Chip.h	/^class affymetrix_chip_data : public ChipData$/;"	c
allele_A	src/Chip.h	/^	std::string	allele_A; \/\/A, T, G, C$/;"	m	struct:map_values
allele_B	src/Chip.h	/^	std::string allele_B; \/\/A, T, G, C$/;"	m	struct:map_values
allld	src/gwaa.c	/^void allld(char *indata, unsigned int *Nids, unsigned int *Nsnps, double *out) {$/;"	f
array_ids_intersected_keys_from_set2	src/merge.snp.data.cpp	/^	std::map<unsigned, unsigned> array_ids_intersected_keys_from_set2;$/;"	m	class:Search	file:
array_snps_intersected_keys_from_set1	src/merge.snp.data.cpp	/^	std::map<unsigned, unsigned> array_snps_intersected_keys_from_set1;$/;"	m	class:Search	file:
array_snps_intersected_keys_from_set2	src/merge.snp.data.cpp	/^	std::map<unsigned, unsigned> array_snps_intersected_keys_from_set2;$/;"	m	class:Search	file:
array_snps_name_intersected_keys_from_set1	src/merge.snp.data.cpp	/^	std::map<unsigned, char*> array_snps_name_intersected_keys_from_set1;$/;"	m	class:Search	file:
beta	src/reg1.h	/^	mematrix<double> beta;$/;"	m	class:coxph_reg
beta	src/reg1.h	/^	mematrix<double> beta;$/;"	m	class:linear_reg
beta	src/reg1.h	/^	mematrix<double> beta;$/;"	m	class:logistic_reg
chinv2	src/chinv2.cpp	/^void chinv2(double **matrix , int n)$/;"	f
cholesky2	src/cholesky2.cpp	/^int cholesky2(double **matrix, int n, double toler)$/;"	f
chromosome	src/Chip.h	/^	std::string chromosome;$/;"	m	struct:map_values
chsolve2	src/chsolve2.cpp	/^void chsolve2(double **matrix, int n, double *y)$/;"	f
cmpfun	src/reg1data.h	/^int cmpfun(const void *a, const void *b)$/;"	f
coding_array	src/gtps_container.h	/^		char * coding_array;$/;"	m	class:gtps_container
column_mean	src/mematri1.h	/^DT mematrix<DT>::column_mean(int nc)$/;"	f	class:T
comp_qval	src/gwaa.c	/^void comp_qval(double *p, int *Length, double *out) {$/;"	f
convert_gt	src/lm_gwaa.cpp	/^void convert_gt(int *gtint, int nids, int gtmode)$/;"	f
convert_snp_affymetrix_C	src/convert.snp.affymetrix.cpp	/^void convert_snp_affymetrix_C(char **dirname_, char **filelist, unsigned *files_amount_, char **map_filename_, char **outfilename_, unsigned *skipaffym, char **alleleID_names, char *alleleID, unsigned *alleleID_amount)$/;"	f
convert_snp_illumina	src/convert_snp_illumina.cpp	/^  void convert_snp_illumina (char** filename, char** outfilename, int* Strandid, int* Bcast, char **allele_codes, int* Ncodes) {$/;"	f
convert_snp_merlin	src/convert_snp_merlin.cpp	/^  void convert_snp_merlin (char** pedfilename, char** mapfilename, char** outfilename, int* Strandid, int* bcast, char **allele_codes, int* Ncodes, int *Fmt, int *Tra) {$/;"	f
convert_snp_merlin_wslash	src/convert_snp_merlin_wslash.cpp	/^  void convert_snp_merlin_wslash (char** pedfilename, char** mapfilename, char** outfilename, int* Strandid, int* bcast, char **allele_codes, int* Ncodes, int *Fmt, int *Tra) {$/;"	f
convert_snp_tped	src/convert_snp_tped.cpp	/^  void convert_snp_tped (char** tpedfilename, char** tfamfilename, char** outfilename, int* Strandid, int* bcast, char **allele_codes, int* Ncodes) {$/;"	f
coxfit2	src/coxfit2.cpp	/^void coxfit2(int   *maxiter,   int   *nusedx,    int   *nvarx, $/;"	f
coxph_data	src/reg1data.h	/^	coxph_data(regdata regdat) $/;"	f	class:coxph_data
coxph_data	src/reg1data.h	/^class coxph_data$/;"	c
coxph_gwaa	src/lm_gwaa.cpp	/^void coxph_gwaa(double *Y, double *X, char *gtdata, int *Nids, int *NXcol, int *Nsnps, int *GTMode, double *out)$/;"	f
coxph_reg	src/reg1.h	/^	coxph_reg(coxph_data cdata, int maxiter, double eps, double tol_chol)$/;"	f	class:coxph_reg
coxph_reg	src/reg1.h	/^class coxph_reg$/;"	c
cut_quotes	src/Chip.cpp	/^std::string cut_quotes(std::string str)$/;"	f
data	src/mematrix.h	/^	DT * data;$/;"	m	class:mematrix
decomp	src/gwaa.c	/^void decomp(char *indata, int nids, int *gt) {$/;"	f
delete_column	src/mematri1.h	/^void mematrix<DT>::delete_column(int delcol)$/;"	f	class:T
delete_row	src/mematri1.h	/^void mematrix<DT>::delete_row(int delrow)$/;"	f	class:T
dmatrix	src/dmatrix.cpp	/^double **dmatrix(double *array, int ncol, int nrow)$/;"	f
do_we_have_strand_and_codding_arrays	src/gtps_container.h	/^		bool do_we_have_strand_and_codding_arrays;$/;"	m	class:gtps_container
dprime	src/gwaa.c	/^void dprime(char *indata, unsigned int *Nids, unsigned int *Nsnps, double *out) {$/;"	f
egscore	src/gwaa.c	/^void egscore(char *gdata, double *pheno, int *Naxes, double *axes, int *Nids, int *Nsnps, int *Nstra, int *stra, double *chi2) $/;"	f
erf	src/survS.h	8;"	d
erfc	src/survS.h	11;"	d
esthfreq	src/gwaa.c	/^void esthfreq(unsigned int nAA, unsigned int nAB, unsigned int nBA, unsigned int nBB, unsigned int nDH, double *eAA, double *eAB, double *eBA, double *eBB)$/;"	f
exclude_amount	src/Chip.h	/^		unsigned exclude_amount;$/;"	m	class:AffymetrixChipMap
fast_merge_C_	src/merge.snp.data.cpp	/^void fast_merge_C_(char *set1, int *num_ids1_, int *num_snps1_,$/;"	f
fastcc	src/gwaa.c	/^void fastcc(char *indata, int *cc, int *Nids, int *Nsnps, double *chi2) {$/;"	f
fastcc_new	src/gwaa.c	/^void fastcc_new(char *indata, int *cc, int *Nids, int *Nsnps, double *chi2) {$/;"	f
filename	src/Chip.h	/^		std::string filename;$/;"	m	class:affymetrix_chip_data
get	src/gtps_container.cpp	/^char gtps_container::get(unsigned id_position, unsigned snp_position)$/;"	f	class:gtps_container
get	src/mematri1.h	/^DT mematrix<DT>::get(int nr, int nc)$/;"	f	class:T
get_allele_A	src/Chip.cpp	/^std::string ChipMap::get_allele_A(const char* snp_name)$/;"	f	class:ChipMap
get_allele_B	src/Chip.cpp	/^std::string ChipMap::get_allele_B(const char* snp_name)$/;"	f	class:ChipMap
get_chromosome	src/Chip.cpp	/^std::string ChipMap::get_chromosome(const char* snp_name)$/;"	f	class:ChipMap
get_coding	src/gtps_container.cpp	/^char gtps_container::get_coding(unsigned snp_position)$/;"	f	class:gtps_container
get_exclude_amount	src/Chip.cpp	/^unsigned AffymetrixChipMap::get_exclude_amount(void)$/;"	f	class:AffymetrixChipMap
get_gtps_array_for_snp	src/gtps_container.cpp	/^char* gtps_container::get_gtps_array_for_snp(unsigned snp_position)$/;"	f	class:gtps_container
get_our_byte_number_and_local_person_number	src/gtps_container.cpp	/^void gtps_container::get_our_byte_number_and_local_person_number(unsigned id_position, unsigned snp_position)$/;"	f	class:gtps_container
get_phisical_position	src/Chip.cpp	/^std::string ChipMap::get_phisical_position(const char* snp_name)$/;"	f	class:ChipMap
get_polymorphism	src/Chip.cpp	/^const int affymetrix_chip_data::get_polymorphism(unsigned snp_num)$/;"	f	class:affymetrix_chip_data
get_snp_amount	src/Chip.cpp	/^const unsigned affymetrix_chip_data::get_snp_amount(void)$/;"	f	class:affymetrix_chip_data
get_snp_name	src/Chip.cpp	/^const char * affymetrix_chip_data::get_snp_name(unsigned snp_num_)$/;"	f	class:affymetrix_chip_data
get_snps_many	src/gwaa.c	/^void get_snps_many(char *a, int *Nsnps, int *Nrows, int *b) {$/;"	f
get_snps_many_internal	src/gwaa.c	/^void get_snps_many_internal(char *a, int nsnps, int nrows, int *b) {$/;"	f
get_strand	src/Chip.cpp	/^char ChipMap::get_strand(const char* snp_name)$/;"	f	class:ChipMap
get_strand	src/gtps_container.cpp	/^char gtps_container::get_strand(unsigned snp_position)$/;"	f	class:gtps_container
getgtvec	src/lm_gwaa.cpp	/^void getgtvec(char *gtdata, int *gtint, int nids, int nbytes, int whichsnp)$/;"	f
getncol	src/mematrix.h	/^	unsigned int getncol(void) {return ncol;}$/;"	f	class:mematrix
getnrow	src/mematrix.h	/^	unsigned int getnrow(void) {return nrow;}$/;"	f	class:mematrix
grammar	src/gwaa.c	/^void grammar(char *gdata, double *pheno, double *invS, int *Nids, int *Nsnps, int *Nstra, int *stra, double *chi2) $/;"	f
gtps_array	src/gtps_container.h	/^		char *gtps_array; \/\/pointer to array where we stotages our data (passed from R)$/;"	m	class:gtps_container
gtps_container	src/gtps_container.cpp	/^gtps_container::gtps_container(char * gtps_array_, char * strand_array_, char * coding_array_, unsigned id_numbers_, unsigned snp_numbers_)$/;"	f	class:gtps_container
gtps_container	src/gtps_container.cpp	/^gtps_container::gtps_container(char * gtps_array_, unsigned id_numbers_, unsigned snp_numbers_)$/;"	f	class:gtps_container
gtps_container	src/gtps_container.h	/^class gtps_container$/;"	c
hom	src/gwaa.c	/^void hom(char *indata, unsigned int *Nids, unsigned int *Nsnps, unsigned int *Option, double *out) {$/;"	f
ibs	src/gwaa.c	/^void ibs(char *indata, unsigned int *Nids, unsigned int *Nsnps, unsigned int *Option, double *out) {$/;"	f
id_numbers	src/gtps_container.h	/^		unsigned id_numbers, snp_numbers;$/;"	m	class:gtps_container
invert	src/mematri1.h	/^mematrix<DT> invert(mematrix <DT> &M)$/;"	f
is_it_snp_in_set1	src/merge.snp.data.cpp	/^bool Search::is_it_snp_in_set1(unsigned what_num_are_we_finding)$/;"	f	class:Search
is_snp_in_map	src/Chip.cpp	/^bool ChipMap::is_snp_in_map(std::string snp_name)$/;"	f	class:ChipMap
ismono	src/reg1data.h	/^	int ismono;$/;"	m	class:regdata
linear_reg	src/reg1.h	/^	linear_reg(regdata rdata,int verbose)$/;"	f	class:linear_reg
linear_reg	src/reg1.h	/^class linear_reg$/;"	c
linreg_gwaa	src/lm_gwaa.cpp	/^void linreg_gwaa(double *Y, double *X, char *gtdata, int *Nids, int *NXcol, int *Nsnps, int *GTMode, double *out)$/;"	f
local_person_number	src/gtps_container.h	/^						 local_person_number; \/\/can have vallues: 1, 2, 3 or 4. Show what is position in the byte.$/;"	m	class:gtps_container
logistic_reg	src/reg1.h	/^	logistic_reg(regdata rdata, int verbose, int maxiter)$/;"	f	class:logistic_reg
logistic_reg	src/reg1.h	/^class logistic_reg$/;"	c
logreg_gwaa	src/lm_gwaa.cpp	/^void logreg_gwaa(double *Y, double *X, char *gtdata, int *Nids, int *NXcol, int *Nsnps, int *GTMode, double *out)$/;"	f
map_values	src/Chip.h	/^struct map_values$/;"	s
maxiter	src/reg1data.h	/^	int maxiter;$/;"	m	class:coxph_data
mematrix	src/mematri1.h	/^mematrix<DT>::mematrix(const mematrix <DT> & M)$/;"	f	class:T
mematrix	src/mematri1.h	/^mematrix<DT>::mematrix(int nr, int nc)$/;"	f	class:T
mematrix	src/mematrix.h	/^	mematrix() {nrow=ncol=nelements=0;}$/;"	f	class:mematrix
mematrix	src/mematrix.h	/^template <class DT> class mematrix$/;"	c
mmscore	src/gwaa.c	/^void mmscore(char *gdata, double *pheno, double *invS, int *Nids, int *Nsnps, int *Nstra, int *stra, double *chi2) $/;"	f
msk	src/gwaa.c	/^int msk[4] = {192,48,12,3};$/;"	v
nbytes_for_one_snp	src/gtps_container.h	/^		unsigned nbytes_for_one_snp;$/;"	m	class:gtps_container
ncol	src/mematrix.h	/^	int ncol;$/;"	m	class:mematrix
ncov	src/reg1data.h	/^	int ncov;$/;"	m	class:coxph_data
ncov	src/reg1data.h	/^	int ncov;$/;"	m	class:regdata
nelements	src/mematrix.h	/^	int nelements;$/;"	m	class:mematrix
nids	src/reg1data.h	/^	int nids;$/;"	m	class:coxph_data
nids	src/reg1data.h	/^	int nids;$/;"	m	class:regdata
noutcomes	src/reg1data.h	/^	int noutcomes;$/;"	m	class:regdata
nrow	src/mematrix.h	/^	int nrow;$/;"	m	class:mematrix
nsigned	src/merge.snp.data.cpp	/^	std::map<unsigned, char*> array_snps_name_intersected_keys_from_set1;$/;"	m	class:Search	file:
nsigned	src/merge.snp.data.cpp	/^	std::map<unsigned, unsigned> array_ids_intersected_keys_from_set2;$/;"	m	class:Search	file:
nsigned	src/merge.snp.data.cpp	/^	std::map<unsigned, unsigned> array_snps_intersected_keys_from_set1;$/;"	m	class:Search	file:
nsigned	src/merge.snp.data.cpp	/^	std::map<unsigned, unsigned> array_snps_intersected_keys_from_set2;$/;"	m	class:Search	file:
offset	src/reg1data.h	/^	mematrix<double> offset;$/;"	m	class:coxph_data
ofs	src/gwaa.c	/^int ofs[4] = {6,4,2,0};$/;"	v
operator *	src/mematri1.h	/^mematrix<DT> mematrix<DT>::operator*(DT toadd)$/;"	f	class:T
operator *	src/mematri1.h	/^mematrix<DT> mematrix<DT>::operator*(mematrix<DT> &M)$/;"	f	class:T
operator +	src/mematri1.h	/^mematrix<DT> mematrix<DT>::operator+(DT toadd)$/;"	f	class:T
operator +	src/mematri1.h	/^mematrix<DT> mematrix<DT>::operator+(mematrix<DT> &M)$/;"	f	class:T
operator -	src/mematri1.h	/^mematrix<DT> mematrix<DT>::operator-(DT toadd)$/;"	f	class:T
operator -	src/mematri1.h	/^mematrix<DT> mematrix<DT>::operator-(mematrix<DT> &M)$/;"	f	class:T
operator =	src/mematri1.h	/^mematrix<DT> &mematrix<DT>::operator=(const mematrix<DT> &M)$/;"	f	class:T
operator []	src/mematri1.h	/^DT &mematrix<DT>::operator[](int i)$/;"	f	class:T
order	src/reg1data.h	/^	mematrix<int>    order;$/;"	m	class:coxph_data
our_byte_number	src/gtps_container.h	/^		unsigned our_byte_number, $/;"	m	class:gtps_container
phisical_position	src/Chip.h	/^	std::string phisical_position; \/\/12345678$/;"	m	struct:map_values
polymorphism	src/Chip.h	/^		char * polymorphism; \/\/0,1,2,3$/;"	m	class:affymetrix_chip_data
print	src/mematri1.h	/^void mematrix<DT>::print(void)$/;"	f	class:T
productMatrDiag	src/mematri1.h	/^mematrix<DT> productMatrDiag(mematrix <DT> &M, mematrix <DT> &D)$/;"	f
put	src/mematri1.h	/^void mematrix<DT>::put(DT value, int nr, int nc)$/;"	f	class:T
put_snps	src/gwaa.c	/^void put_snps(int *b, int *Nsnps, char *a) {$/;"	f
qtscore	src/gwaa.c	/^void qtscore(char *gdata, double *pheno, int *Type, int *Nids, int *Nsnps, int *Nstra, int *stra, double *chi2) $/;"	f
qtscore_glob	src/gwaa.c	/^void qtscore_glob(char *gdata, double *pheno, int *Type, int *Nids, int *Nsnps, int *Nstra, int *stra, double *chi2) $/;"	f
r2	src/gwaa.c	/^void r2(char *indata, unsigned int *Nids, unsigned int *Nsnps, double *out) {$/;"	f
rearrangement_array	src/gtps_container.h	/^		unsigned *rearrangement_array;$/;"	m	class:gtps_container
recode_snp	src/Chip.cpp	/^std::string ChipMap::recode_snp(const char* snp_name)$/;"	f	class:ChipMap
recoded_snp_name	src/Chip.h	/^	std::string recoded_snp_name; \/\/rs12345678$/;"	m	struct:map_values
recoding_snp_data_under_coding_and_strand	src/merge.snp.data.cpp	/^char recoding_snp_data_under_coding_and_strand(char set1_val_, gtps_container *Set1, gtps_container *Set2, unsigned snp_in_set1, unsigned snp_in_set2, std::map<char, char*>* coding_polymorphism_map_, std::map<char, char> *alleleID_reverse_, unsigned *snp_position_error, char* snp_set1_codding_error, char* snp_set2_codding_error, int *error_amount_, unsigned *found_error_amount_snp, unsigned *snp_error_counter, bool user_want_to_look_at_strand, std::map<std::string, std::string> *complemetntary)		$/;"	f
redundant	src/gwaa.c	/^void redundant(char *indata, int *Nids, int *Nsnps, double *Minc, int *outlist) {$/;"	f
regdata	src/reg1data.h	/^	regdata(double *OY, double *OX, int *OG, int origids, int nxcol, int nycol) $/;"	f	class:regdata
regdata	src/reg1data.h	/^class regdata$/;"	c
reinit	src/mematri1.h	/^void mematrix<DT>::reinit(int nr, int nc)$/;"	f	class:T
reorder	src/mematri1.h	/^mematrix<DT> reorder(mematrix <DT> &M, mematrix <int> order)$/;"	f
replace	src/convert.snp.affymetrix.cpp	/^std::string replace(std::string val, char what, char replace='_')$/;"	f
replace_mach	src/gwaautil.cpp	/^string replace_mach(string in) {$/;"	f
replace_mrl	src/gwaautil.cpp	/^string replace_mrl(string in) {$/;"	f
rho	src/gwaa.c	/^void rho(char *indata, unsigned int *Nids, unsigned int *Nsnps, double *out) {$/;"	f
sebeta	src/reg1.h	/^	mematrix<double> sebeta;$/;"	m	class:coxph_reg
sebeta	src/reg1.h	/^	mematrix<double> sebeta;$/;"	m	class:linear_reg
sebeta	src/reg1.h	/^	mematrix<double> sebeta;$/;"	m	class:logistic_reg
set	src/gtps_container.cpp	/^void gtps_container::set(unsigned id_position, unsigned snp_position, char data)$/;"	f	class:gtps_container
sigma2	src/reg1.h	/^	double sigma2;$/;"	m	class:coxph_reg
sigma2	src/reg1.h	/^	double sigma2;$/;"	m	class:linear_reg
sigma2	src/reg1.h	/^	double sigma2;$/;"	m	class:logistic_reg
slog	src/gwaa.c	1143;"	d	file:
snp_amount	src/Chip.h	/^		unsigned snp_amount;$/;"	m	class:affymetrix_chip_data
snp_name	src/Chip.h	/^		char ** snp_name; 			$/;"	m	class:affymetrix_chip_data
snp_name	src/Chip.h	/^	std::string snp_name; \/\/affymetrix SNP name$/;"	m	struct:map_values
snp_numbers	src/gtps_container.h	/^		unsigned id_numbers, snp_numbers;$/;"	m	class:gtps_container
snp_summary	src/gwaa.c	/^void snp_summary(char *indata, int *Nids, int *Nsnps, double *out) {$/;"	f
snp_summary_exhwe	src/gwaa.c	/^void snp_summary_exhwe(char *indata, unsigned int *Nids, unsigned int *Nsnps, double *out) {$/;"	f
sset	src/gwaa.c	/^void sset(char *indata, int *Nsnps, int *Nids, int *outlist, int *Noutlist, char *out) {$/;"	f
sstat	src/reg1data.h	/^	mematrix<int>    sstat;$/;"	m	class:coxph_data
stime	src/reg1data.h	/^	mematrix<double> stime;$/;"	m	class:coxph_data
strand	src/Chip.h	/^	char strand; \/\/+ or - or u or another$/;"	m	struct:map_values
strand_array	src/gtps_container.h	/^		char * strand_array;$/;"	m	class:gtps_container
strata	src/reg1data.h	/^	mematrix<int>    strata;$/;"	m	class:coxph_data
string	src/Chip.h	/^		std::map<std::string, map_values> Map;$/;"	m	class:ChipMap::td
string	src/merge.snp.data.cpp	/^typedef std::map<std::string, std::string>::const_iterator CI;$/;"	t	class:td	file:
temp	src/gwaa.c	/^void temp(char *indata, int *Nids, int *g) {$/;"	f
todouble	src/mematri1.h	/^mematrix<double> todouble(mematrix <DT> &M)$/;"	f
transpose	src/mematri1.h	/^mematrix<DT> transpose(mematrix <DT> &M)$/;"	f
weights	src/reg1data.h	/^	mematrix<double> weights;$/;"	m	class:coxph_data
what_id_is_in_set1	src/merge.snp.data.cpp	/^unsigned Search::what_id_is_in_set1(unsigned id_num_in_set2)$/;"	f	class:Search
what_snp_is_in_set2	src/merge.snp.data.cpp	/^unsigned Search::what_snp_is_in_set2(unsigned snp_num_in_set1)$/;"	f	class:Search
~AffymetrixChipMap	src/Chip.cpp	/^AffymetrixChipMap::~AffymetrixChipMap()$/;"	f	class:AffymetrixChipMap
~affymetrix_chip_data	src/Chip.cpp	/^affymetrix_chip_data::~affymetrix_chip_data(void)$/;"	f	class:affymetrix_chip_data
~coxph_data	src/reg1data.h	/^	~coxph_data()$/;"	f	class:coxph_data
~coxph_reg	src/reg1.h	/^	~coxph_reg()$/;"	f	class:coxph_reg
~gtps_container	src/gtps_container.cpp	/^gtps_container::~gtps_container(void)$/;"	f	class:gtps_container
~linear_reg	src/reg1.h	/^	~linear_reg()$/;"	f	class:linear_reg
~logistic_reg	src/reg1.h	/^	~logistic_reg()$/;"	f	class:logistic_reg
~mematrix	src/mematrix.h	/^	~mematrix() {if (nelements>0) delete [] data;}$/;"	f	class:mematrix
~regdata	src/reg1data.h	/^	~regdata()$/;"	f	class:regdata
